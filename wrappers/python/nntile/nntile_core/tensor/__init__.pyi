from collections.abc import Buffer
from typing import Sequence

from .tile import Tile, TileTraits

class TensorTraits:
    def __init__(self, shape: Sequence[int],
                 basetile_shape: Sequence[int]) -> None: ...

    @property
    def basetile_shape(self) -> Sequence[int]: ...
    @property
    def grid(self) -> TileTraits: ...

    def get_tile_shape(self, tile_index: Sequence[int]) -> Sequence[int]: ...
    def get_grid_shape(self) -> Sequence[int]: ...

class Tensor(TensorTraits):
    def __init__(self, traits: TensorTraits, distribution: Sequence[int],
                 last_tag: int): ...

    @property
    def distribution(self) -> Sequence[int]: ...
    @property
    def next_tag(self) -> int: ...

    def from_array(self, array: Buffer) -> None: ...
    def to_array(self, array: Buffer) -> None: ...

    def get_tile(self, linear_offset: int) -> Tile: ...
    def print_scalar_async(self) -> None: ...

    def set_reduction_add(self) -> None: ...
    def set_reduction_hypot(self) -> None: ...
    def set_reduction_maxsumexp(self) -> None: ...

    def invalidate_submit(self) -> None: ...
    def unregister(self) -> None: ...
    def wont_use(self) -> None: ...

def tensor_from_array(tensor: Tensor, array: Buffer): ...
def tensor_to_array(tensor: Tensor, array: Buffer): ...

class Tensor_bf16(Tensor): ...
class Tensor_bool(Tensor): ...
class Tensor_fp32(Tensor): ...
class Tensor_fp32_fast_tf32(Tensor): ...
class Tensor_fp64(Tensor): ...
class Tensor_int64(Tensor): ...
